name: React Native Android and iOS Builds

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  ios-adhoc-build:
    name: Build iOS IPA (Ad Hoc)
    runs-on: macos-latest
    env:
      NODE_VERSION: '18'
    steps:
      # Clean derived data
      - name: Clean Derived Data
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ~/Library/Caches/CocoaPods

      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Install npm dependencies
      - name: Install npm dependencies
        run: npm install || exit 1

      # Install CocoaPods
      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods -v 1.15.2
          pod --version

      # Install CocoaPods dependencies
      - name: Install Pods
        run: |
          cd ios
          pod install --repo-update || exit 1

      # Fix Bundle Identifier in Xcode Project
      - name: Fix Bundle Identifier in Xcode Project
        env:
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
        run: |
          cd ios
          echo "üîß Setting bundle identifier: $BUNDLE_ID"
          if [ -z "$BUNDLE_ID" ]; then
            echo "‚ùå Bundle ID secret is missing!"
            exit 1
          fi
          sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = [^;]*;/PRODUCT_BUNDLE_IDENTIFIER = \"$BUNDLE_ID\";/g" CICDDEMOAPP.xcodeproj/project.pbxproj || \
          sed -i '' "/buildSettings = {/,/};/s/PRODUCT_BUNDLE_IDENTIFIER = [^;]*;/PRODUCT_BUNDLE_IDENTIFIER = \"$BUNDLE_ID\";/g" CICDDEMOAPP.xcodeproj/project.pbxproj
          echo "‚úÖ Bundle identifier set"

      # Set up App Store Connect API key for automatic signing
      - name: Set up App Store Connect API Key
        env:
          APPSTORE_API_KEY: ${{ secrets.APPSTORE_API_KEY }}
          APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
        run: |
          if [ -z "$APPSTORE_API_KEY" ] || [ -z "$APPSTORE_KEY_ID" ] || [ -z "$APPSTORE_ISSUER_ID" ]; then
            echo "‚ùå One or more App Store Connect API key secrets are missing!"
            exit 1
          fi
          mkdir -p ~/.appstoreconnect/private_keys
          echo "$APPSTORE_API_KEY" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_${APPSTORE_KEY_ID}.p8
          echo "‚úÖ App Store Connect API key configured"

      # Create ad hoc export options plist
      - name: Create Ad Hoc exportOptions.plist
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          if [ -z "$APPLE_TEAM_ID" ]; then
            echo "‚ùå Apple Team ID secret is missing!"
            exit 1
          fi
          cat > ios/exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>compileBitcode</key>
            <false/>
            <key>method</key>
            <string>ad-hoc</string>
            <key>signingStyle</key>
            <string>automatic</string>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>teamID</key>
            <string>$APPLE_TEAM_ID</string>
            <key>thinning</key>
            <string>&lt;none&gt;</string>
          </dict>
          </plist>
          EOF
          echo "‚úÖ Ad hoc exportOptions.plist created"
          cat ios/exportOptions.plist

      # Build iOS app for ad hoc distribution
      - name: Build iOS Ad Hoc App
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
        run: |
          cd ios
          echo "üèóÔ∏è Cleaning build directory..."
          xcodebuild clean -workspace CICDDEMOAPP.xcworkspace -scheme CICDDEMOAPP -configuration Release || exit 1
          echo "üîç Verifying project setup..."
          xcodebuild -workspace CICDDEMOAPP.xcworkspace -scheme CICDDEMOAPP -configuration Release -showBuildSettings > build_settings.log
          grep -E "(PRODUCT_BUNDLE_IDENTIFIER|DEVELOPMENT_TEAM|CODE_SIGN_STYLE)" build_settings.log || true
          echo "üöÄ Building archive for ad hoc distribution..."
          xcodebuild archive \
            -workspace CICDDEMOAPP.xcworkspace \
            -scheme CICDDEMOAPP \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath build/CICDDEMOAPP.xcarchive \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            CODE_SIGN_STYLE=Automatic \
            CURRENT_PROJECT_VERSION=1 \
            MARKETING_VERSION=1.0 \
            -verbose || exit 1
          if [ -d "build/CICDDEMOAPP.xcarchive" ]; then
            echo "‚úÖ Ad hoc archive created successfully!"
          else
            echo "‚ùå Archive creation failed!"
            cat build_settings.log
            exit 1
          fi

      # Export IPA for ad hoc
      - name: Export Ad Hoc IPA
        run: |
          cd ios
          echo "üì¶ Exporting Ad Hoc IPA..."
          xcodebuild -exportArchive \
            -archivePath build/CICDDEMOAPP.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build \
            -allowProvisioningUpdates \
            -verbose || exit 1
          echo "‚úÖ Ad hoc export completed"
          if compgen -G "build/*.ipa" > /dev/null; then
            IPA_FILE=$(ls build/*.ipa)
            echo "üéâ Ad Hoc IPA created: $IPA_FILE"
            ls -la "$IPA_FILE"
          else
            echo "‚ùå IPA not found!"
            ls -la build/
            exit 1
          fi

      # Upload IPA artifact
      - name: Upload Ad Hoc IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app-adhoc
          path: ios/build/*.ipa
          retention-days: 30

      # Cleanup
      - name: Cleanup
        if: always()
        run: |
          rm -rf ~/.appstoreconnect/private_keys/AuthKey_${{ secrets.APPSTORE_KEY_ID }}.p8 || true
          rm -rf ios/build_settings.log || true
          rm -rf ios/exportOptions.plist || true

      # Success notification
      - name: Success Notification
        if: success()
        run: |
          echo "üéâ iOS Ad Hoc IPA Build Completed Successfully!"
          echo "üì± Bundle ID: ${{ secrets.APPLE_BUNDLE_ID }}"
          echo "üë• Team ID: ${{ secrets.APPLE_TEAM_ID }}"
          echo "üì≤ IPA can be installed directly on provisioned devices"
          echo "‚úÖ Ad Hoc IPA is available in the artifacts"
