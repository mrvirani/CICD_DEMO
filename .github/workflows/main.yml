name: React Native Android and iOS Builds with Firebase setup

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  android-build:
    name: Build Android Debug & Release
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Code Checkout
      - name: Checkout code
        uses: actions/checkout@v4

      # 2️⃣ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'

      # 3️⃣ Install Dependencies
      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # 4️⃣ Setup JDK
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: gradle

      # 5️⃣ Android Debug Build
      - name: Build Debug APK
        working-directory: android
        run: ./gradlew assembleDebug --no-daemon

      # 6️⃣ Android Release Build
      - name: Build Release APK
        working-directory: android
        run: ./gradlew assembleRelease --no-daemon

      # 7️⃣ Upload Artifacts (Debug & Release APK)
      - name: Upload APKs
        uses: actions/upload-artifact@v4
        with:
          name: android-apks
          path: |
            android/app/build/outputs/apk/debug/app-debug.apk
            android/app/build/outputs/apk/release/app-release.apk

      # ---- Firebase Setup ----
      - name: Setup Firebase CLI
        run: curl -sL https://firebase.tools | bash

      # ---- Upload debug Apk to Firebase ----
      - name: Upload Debug APK to Firebase
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > $GITHUB_WORKSPACE/firebase.json
          export GOOGLE_APPLICATION_CREDENTIALS=$GITHUB_WORKSPACE/firebase.json
          firebase appdistribution:distribute android/app/build/outputs/apk/debug/app-debug.apk \
            --app ${{ secrets.FIREBASE_ANDROID_APP_ID }} \
            --groups Android_testers \
            --release-notes "Android debug Apk - $(date +'%Y-%m-%d %H:%M')"

      # ---- Upload Release Apk to Firebase ----
      - name: Upload Release APK to Firebase
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > $GITHUB_WORKSPACE/firebase.json
          export GOOGLE_APPLICATION_CREDENTIALS=$GITHUB_WORKSPACE/firebase.json
          firebase appdistribution:distribute android/app/build/outputs/apk/release/app-release.apk \
            --app ${{ secrets.FIREBASE_ANDROID_APP_ID }} \
            --groups Android_testers \
            --release-notes "Android Release Apk - $(date +'%Y-%m-%d %H:%M')"

  ios-adhoc-build:
    name: Build iOS IPA (Ad Hoc)
    runs-on: macos-latest
    env:
      NODE_VERSION: '18'

    steps:
      # Clean derived data
      - name: Clean Derived Data
        run: |
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ~/Library/Caches/CocoaPods

      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Install npm dependencies
      - name: Install npm dependencies
        run: npm install

      # Install CocoaPods
      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods
          pod --version

      # Install CocoaPods dependencies
      - name: Install Pods
        run: |
          cd ios
          pod install --repo-update

      # Fix Bundle Identifier in Xcode Project
      - name: Fix Bundle Identifier in Xcode Project
        env:
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID_DEV }}
        run: |
          cd ios
          echo "🔧 Setting bundle identifier: $BUNDLE_ID"
          sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = [^;]*;/PRODUCT_BUNDLE_IDENTIFIER = \"$BUNDLE_ID\";/g" CICDDEMOAPP.xcodeproj/project.pbxproj || \
          sed -i '' "/buildSettings = {/,/};/s/PRODUCT_BUNDLE_IDENTIFIER = [^;]*;/PRODUCT_BUNDLE_IDENTIFIER = \"$BUNDLE_ID\";/g" CICDDEMOAPP.xcodeproj/project.pbxproj
          echo "✅ Bundle identifier set"

      - name: Debug Provisioning Profile
        run: |
          echo "$IOS_DEVELOPMENT_PROFILE_BASE64" | base64 --decode > profile.mobileprovision
          file profile.mobileprovision
          head -20 profile.mobileprovision || true

      # Setup code signing for ad hoc
      - name: Setup Ad Hoc Code Signing
        env:
          IOS_DEVELOPMENT_PROFILE_BASE64: ${{ secrets.IOS_DEVELOPMENT_PROFILE_BASE64 }}
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          set -euo pipefail
          echo "🔐 Creating build keychain..."
          security create-keychain -p "$IOS_CERTIFICATE_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$IOS_CERTIFICATE_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 build.keychain
          echo "📦 Importing distribution certificate..."
          echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          echo "🔧 Setting key partition list..."
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$IOS_CERTIFICATE_PASSWORD" build.keychain
          echo "📱 Importing ad hoc provisioning profile..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$IOS_DEVELOPMENT_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/build.mobileprovision
          echo "📋 Extracting provisioning profile info..."
          security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/build.mobileprovision > profile.plist
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" profile.plist)
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c "Print :Name" profile.plist)
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          echo "PROFILE_NAME=$PROFILE_NAME" >> $GITHUB_ENV
          echo "✅ Ad hoc code signing setup complete"
          echo "Profile UUID: $PROFILE_UUID"
          echo "Profile Name: $PROFILE_NAME"

      # Create ad hoc export options plist
      - name: Create Ad Hoc exportOptions.plist
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
        run: |
          cat > ios/exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>compileBitcode</key>
              <false/>
              <key>method</key>
              <string>ad-hoc</string>
              <key>signingStyle</key>
              <string>manual</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>teamID</key>
              <string>$APPLE_TEAM_ID</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$BUNDLE_ID</key>
                  <string>$PROFILE_UUID</string>
              </dict>
              <key>thinning</key>
              <string>&lt;none&gt;</string>
          </dict>
          </plist>
          EOF
          echo "✅ Ad hoc exportOptions.plist created"
          cat ios/exportOptions.plist

      # Build iOS app for ad hoc distribution
      - name: Build iOS Ad Hoc App
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
        run: |
          cd ios
          xcodebuild clean -workspace CICDDEMOAPP.xcworkspace -scheme CICDDEMOAPP -configuration Release
          xcodebuild archive \
            -workspace CICDDEMOAPP.xcworkspace \
            -scheme CICDDEMOAPP \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath build/CICDDEMOAPP.xcarchive \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
            CODE_SIGN_STYLE="Manual" \
            CODE_SIGN_IDENTITY="${{ secrets.APPLE_SIGNING_IDENTITY }}" \
            CURRENT_PROJECT_VERSION=1 \
            MARKETING_VERSION=1.0

      # Export IPA for ad hoc
      - name: Export Ad Hoc IPA
        run: |
          cd ios
          xcodebuild -exportArchive \
            -archivePath build/CICDDEMOAPP.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build \
            -allowProvisioningUpdates

      # Upload IPA artifact
      - name: Upload Ad Hoc IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app-adhoc
          path: ios/build/*.ipa
          retention-days: 30

      # ---- Firebase Setup ----
      - name: Setup Firebase CLI
        run: curl -sL https://firebase.tools | bash

      # Upload Ad Hoc IPA to Firebase
      - name: Upload Ad Hoc IPA to Firebase
        run: |
          echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > $GITHUB_WORKSPACE/firebase.json
          export GOOGLE_APPLICATION_CREDENTIALS=$GITHUB_WORKSPACE/firebase.json
          IPA_FILE=$(ls ios/build/*.ipa | head -n 1)
          echo "📤 Uploading $IPA_FILE to Firebase..."
          firebase appdistribution:distribute "$IPA_FILE" \
            --app ${{ secrets.FIREBASE_IOS_APP_ID }} \
            --groups adhoc \
            --release-notes "iOS AdHoc Build - $(date +'%Y-%m-%d %H:%M')"

      # Cleanup
      - name: Cleanup
        if: always()
        run: |
          security delete-keychain build.keychain || true
          rm -f certificate.p12 profile.plist || true
