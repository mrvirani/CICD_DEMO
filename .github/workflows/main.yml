name: "Build iOS IPA"
on:
  push:
    branches: [ "main" ]
jobs:
  build_ios:
    runs-on: macos-latest
    steps:
      # 1️⃣ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Check Xcode version
      - name: Check Xcode version
        run: xcodebuild -version

      # 3️⃣ Setup keychain and import certificate
      - name: Setup keychain and provisioning profile
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_DEVELOPMENT_PROFILE_BASE64: ${{ secrets.IOS_DEVELOPMENT_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERT_PATH=$RUNNER_TEMP/certificate.p12
          PROFILE_PATH=$RUNNER_TEMP/profile.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/build.keychain-db

          # Decode certificate and provisioning profile
          echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > $CERT_PATH
          echo "$IOS_DEVELOPMENT_PROFILE_BASE64" | base64 --decode > $PROFILE_PATH

          # Extract UUID and details from provisioning profile
          UUID=$(security cms -D -i "$PROFILE_PATH" | plutil -extract UUID raw -)
          echo "Extracted UUID: $UUID"
          echo "PROVISIONING_PROFILE_UUID=$UUID" >> $GITHUB_ENV

          # Debug: Inspect provisioning profile details
          echo "Provisioning Profile Details:"
          security cms -D -i "$PROFILE_PATH" | plutil -p -

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate
          security import $CERT_PATH -P "$IOS_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychains -d user -s $KEYCHAIN_PATH $(security default-keychain -d user)
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Debug: List certificates in keychain to verify import
          echo "Certificates in keychain:"
          security find-certificate -a -c "iPhone" -p $KEYCHAIN_PATH
          security find-certificate -a -c "Apple" -p $KEYCHAIN_PATH

          # Copy provisioning profile with correct UUID
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision

          # Debug: List installed provisioning profiles
          echo "Installed provisioning profiles:"
          ls -l ~/Library/MobileDevice/Provisioning\ Profiles

      # 4️⃣ Install dependencies
      - name: Install dependencies
        run: |
          npm install
          cd ios
          pod install --repo-update
          cd ..

      # 5️⃣ Build Xcode archive (generic iOS device)
      - name: Build archive
        env:
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
        run: |
          # Clean DerivedData to avoid cache issues
          rm -rf ~/Library/Developer/Xcode/DerivedData/*

          # Build with verbose output for debugging
          xcodebuild -workspace ios/CICDDEMOAPP.xcworkspace \
            -scheme "CICDDEMOAPP" \
            -configuration Release \
            -sdk iphoneos \
            -archivePath $RUNNER_TEMP/CICDDEMOAPP.xcarchive \
            -destination "generic/platform=iOS" \
            DEVELOPMENT_TEAM=$APPLE_TEAM_ID \
            CODE_SIGN_IDENTITY="$APPLE_SIGNING_IDENTITY" \
            PRODUCT_BUNDLE_IDENTIFIER=$APPLE_BUNDLE_ID \
            CODE_SIGN_STYLE="Manual" \
            PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_UUID" \
            ENABLE_PREVIEWS=NO \
            -verbose \
            clean archive

      # 6️⃣ Export IPA
      - name: Export IPA
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        run: |
          EXPORT_PATH=$RUNNER_TEMP/build
          mkdir -p $EXPORT_PATH
          EXPORT_PLIST=$RUNNER_TEMP/ExportOptions.plist

          # Create ExportOptions.plist for Ad Hoc distribution
          cat << EOF > $EXPORT_PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>ad-hoc</string>
              <key>teamID</key>
              <string>$APPLE_TEAM_ID</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>$APPLE_BUNDLE_ID</key>
                  <string>$PROVISIONING_PROFILE_UUID</string>
              </dict>
              <key>signingCertificate</key>
              <string>$APPLE_SIGNING_IDENTITY</string>
              <key>signingStyle</key>
              <string>manual</string>
          </dict>
          </plist>
          EOF

          # Debug: Display ExportOptions.plist
          echo "ExportOptions.plist contents:"
          cat $EXPORT_PLIST

          xcodebuild -exportArchive \
            -archivePath $RUNNER_TEMP/CICDDEMOAPP.xcarchive \
            -exportPath $EXPORT_PATH \
            -exportOptionsPlist $EXPORT_PLIST

          # Debug: List exported IPA
          echo "Exported IPA:"
          ls -l $EXPORT_PATH

      # 7️⃣ Upload IPA artifact
      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: CICDDEMOAPP-IPA
          path: ${{ runner.temp }}/build/CICDDEMOAPP.ipa
          retention-days: 3
