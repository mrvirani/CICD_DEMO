name: React Native iOS Development Build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  ios-development-build:
    name: Build iOS IPA (Development Testing)
    runs-on: macos-14
    env:
      NODE_VERSION: '18'
    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      # Install npm dependencies
      - name: Install npm dependencies
        run: npm install || exit 1

      # Install CocoaPods
      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods -v 1.15.2
          pod --version

      # Install CocoaPods dependencies
      - name: Install Pods
        run: |
          cd ios
          pod install --repo-update || exit 1

      # Fix Bundle Identifier in Xcode Project
      - name: Fix Bundle Identifier in Xcode Project
        env:
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
        run: |
          cd ios
          if [ -z "$BUNDLE_ID" ]; then
            echo "‚ùå Bundle ID secret is missing!"
            exit 1
          fi
          sed -i '' "s/PRODUCT_BUNDLE_IDENTIFIER = [^;]*;/PRODUCT_BUNDLE_IDENTIFIER = \"$BUNDLE_ID\";/g" CICDDEMOAPP.xcodeproj/project.pbxproj || \
          sed -i '' "/buildSettings = {/,/};/s/PRODUCT_BUNDLE_IDENTIFIER = [^;]*;/PRODUCT_BUNDLE_IDENTIFIER = \"$BUNDLE_ID\";/g" CICDDEMOAPP.xcodeproj/project.pbxproj
          echo "‚úÖ Bundle identifier set"

      # Setup code signing for development
      - name: Setup Development Code Signing
        env:
          IOS_DEVELOPMENT_PROFILE_BASE64: ${{ secrets.IOS_DEVELOPMENT_PROFILE_BASE64 }}
          IOS_PROVISIONING_PROFILE_UUID: ${{ secrets.IOS_PROVISIONING_PROFILE_UUID }}
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          if [ -z "$IOS_DEVELOPMENT_PROFILE_BASE64" ] || [ -z "$IOS_PROVISIONING_PROFILE_UUID" ] || [ -z "$IOS_CERTIFICATE_BASE64" ] || [ -z "$IOS_CERTIFICATE_PASSWORD" ] || [ -z "$APPLE_TEAM_ID" ]; then
            echo "‚ùå One or more code signing secrets are missing!"
            exit 1
          fi
          echo "üîê Creating build keychain..."
          security create-keychain -p "$IOS_CERTIFICATE_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$IOS_CERTIFICATE_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 build.keychain
          echo "üì¶ Importing development certificate..."
          echo "$IOS_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          echo "üì± Importing ad hoc provisioning profile..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$IOS_DEVELOPMENT_PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/$IOS_PROVISIONING_PROFILE_UUID.mobileprovision
          echo "‚úÖ Development code signing setup complete"
          echo "üîç Verifying provisioning profile: $(ls ~/Library/MobileDevice/Provisioning\ Profiles/)"

      # Create ad hoc export options plist
      - name: Create Ad Hoc exportOptions.plist
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
          IOS_PROVISIONING_PROFILE_UUID: ${{ secrets.IOS_PROVISIONING_PROFILE_UUID }}
        run: |
          if [ -z "$APPLE_TEAM_ID" ] || [ -z "$BUNDLE_ID" ] || [ -z "$IOS_PROVISIONING_PROFILE_UUID" ]; then
            echo "‚ùå Team ID, Bundle ID, or Provisioning Profile UUID secret is missing!"
            exit 1
          fi
          cat > ios/exportOptions.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>compileBitcode</key>
            <false/>
            <key>method</key>
            <string>ad-hoc</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>teamID</key>
            <string>$APPLE_TEAM_ID</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>$BUNDLE_ID</key>
              <string>$IOS_PROVISIONING_PROFILE_UUID</string>
            </dict>
            <key>thinning</key>
            <string>&lt;none&gt;</string>
          </dict>
          </plist>
          EOF
          echo "‚úÖ Ad hoc exportOptions.plist created"

      # Build and archive iOS app
      - name: Build and Archive iOS App
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          BUNDLE_ID: ${{ secrets.APPLE_BUNDLE_ID }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_PROVISIONING_PROFILE_UUID: ${{ secrets.IOS_PROVISIONING_PROFILE_UUID }}
        run: |
          cd ios
          echo "üèóÔ∏è Cleaning build directory..."
          xcodebuild clean -workspace CICDDEMOAPP.xcworkspace -scheme CICDDEMOAPP -configuration Release || exit 1
          echo "üöÄ Archiving for ad hoc distribution..."
          xcodebuild archive \
            -workspace CICDDEMOAPP.xcworkspace \
            -scheme CICDDEMOAPP \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath build/CICDDEMOAPP.xcarchive \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            PRODUCT_BUNDLE_IDENTIFIER="$BUNDLE_ID" \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            PROVISIONING_PROFILE_SPECIFIER="$IOS_PROVISIONING_PROFILE_UUID" \
            CURRENT_PROJECT_VERSION=1 \
            MARKETING_VERSION=1.0 \
            -verbose || exit 1
          if [ -d "build/CICDDEMOAPP.xcarchive" ]; then
            echo "‚úÖ Archive created successfully!"
          else
            echo "‚ùå Archive creation failed!"
            exit 1
          fi

      # Export IPA for ad hoc
      - name: Export Ad Hoc IPA
        run: |
          cd ios
          echo "üì¶ Exporting Ad Hoc IPA..."
          xcodebuild -exportArchive \
            -archivePath build/CICDDEMOAPP.xcarchive \
            -exportOptionsPlist exportOptions.plist \
            -exportPath build \
            -allowProvisioningUpdates \
            -verbose || exit 1
          echo "‚úÖ Ad hoc export completed"
          if compgen -G "build/*.ipa" > /dev/null; then
            IPA_FILE=$(ls build/*.ipa)
            echo "üéâ Ad Hoc IPA created: $IPA_FILE"
            ls -la "$IPA_FILE"
          else
            echo "‚ùå IPA not found!"
            ls -la build/
            exit 1
          fi

      # Upload IPA artifact
      - name: Upload Ad Hoc IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-development-ipa
          path: ios/build/*.ipa
          retention-days: 30

      # Cleanup
      - name: Cleanup
        if: always()
        run: |
          security delete-keychain build.keychain || true
          rm -f certificate.p12 || true
          rm -rf ~/Library/MobileDevice/Provisioning\ Profiles/* || true
          rm -rf ios/exportOptions.plist || true

      # Success notification
      - name: Success Notification
        if: success()
        run: |
          echo "üéâ iOS Development IPA Build Completed Successfully!"
          echo "üì± Bundle ID: ${{ secrets.APPLE_BUNDLE_ID }}"
          echo "üë• Team ID: ${{ secrets.APPLE_TEAM_ID }}"
          echo "üì≤ IPA can be installed on test devices"
          echo "‚úÖ Development IPA is available in the artifacts"
